#!/usr/bin/env node
const chalk = require('chalk');
const exec = require('child_process').execSync;
const fs = require('fs-extra')
const mkdirp = require('mkdirp');
const os = require('os');
const path = require('path');
const nodePath = path;
const program = require('commander');
const readline = require('readline');
const sortedObject = require('sorted-object');
const util = require('util');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

around(program, 'optionMissingArgument', function (fn, args) {
  program.outputHelp()
  fn.apply(this, args)
  return { args: [], unknown: [] }
})

before(program, 'outputHelp', function () {
  // track if help was shown for unknown option
  this._helpShown = true
});

before(program, 'unknownOption', function () {
  // allow unknown options if help was shown, to prevent trailing error
  this._allowUnknownOption = this._helpShown

  // show help if not yet shown
  if (!this._helpShown) {
    program.outputHelp()
  }
})

program
  .version(version, '    --version')
  .usage('[options] [dir]')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (plain|less|scss|sass) (defaults to scss)')
  .option('    --auth', 'adds authentication support with passport.js (defaults to false)')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install an around function; AOP.
 */

function around(obj, method, fn) {
  var old = obj[method]

  obj[method] = function () {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) args[i] = arguments[i]
    return fn.call(this, old, args)
  }
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {

  let app = loadTemplate('js/app.js');

  createDir(`${path}/bin`);
  createDir(`${path}/models`);
  createDir(`${path}/public/images`);
  createDir(`${path}/public/javascripts`);
  createDir(`${path}/public/stylesheets`);
  createDir(`${path}/routes`);
  createDir(`${path}/views`);

  // Add debugger configuration for Visual Studio Code
  createDir(`${path}/.vscode`);
  copy_template('vscode/launch.json', `${path}/.vscode/launch.json`)
  copy_template('vscode/settings.json', `${path}/.vscode/settings.json`)

  // package.json
  var pkg = {
    name: app_name,
    version: '0.0.0',
    private: true,
    scripts: {
      'start': 'node ./bin/www',
      'dev': `DEBUG=${app_name}:* nodemon ./bin/www`,
      'dev-windows': `nodemon ./bin/www`,
    },
    dependencies: {
      'body-parser': '^1.18.3',
      'cookie-parser': '^1.4.3',
      'express': '^4.16.3',
      'hbs': '^4.0.1',
      'pug': '^2.0.3',
      'mongoose': '^5.2.10',
      'morgan': '^1.9.0',
      'serve-favicon': '^2.5.0',
      'dotenv': '^6.0.0'
    },
    devDependencies: {
      'nodemon': '^1.12.1'
    }
  }

  // Add Authentication Dependencies
  if (program.auth) {
    pkg.dependencies['bcrypt'] = "^3.0.0";
    pkg.dependencies['connect-ensure-login'] = "^0.1.1";
    pkg.dependencies['connect-flash'] = "^0.1.1";
    pkg.dependencies['connect-mongo'] = "^2.0.1";
    pkg.dependencies['express-session'] = "^1.15.6";
    pkg.dependencies['passport-local'] = "^1.0.0";
    pkg.dependencies['passport'] = "^0.4.0";

    app = app.replace('{auth_requires}', `
const session    = require("express-session");
const MongoStore = require('connect-mongo')(session);
const flash      = require("connect-flash");
    `);

    // Add auth to main app.js script
    app = app.replace('{auth}', `
// Enable authentication using session + passport
app.use(session({
  secret: 'bliss',
  resave: true,
  saveUninitialized: true,
  store: new MongoStore( { mongooseConnection: mongoose.connection })
}))
app.use(flash());
require('./passport')(app);
    `);

    app = app.replace('{auth_routes}', `
const authRoutes = require('./routes/auth');
app.use('/auth', authRoutes);
      `);

    // Copy entire passport config with LocalStrategy
    copy_template('passport/models/User.js', `${path}/models/User.js`)
    copy_template('passport/authRouter.js', `${path}/routes/auth.js`)
    copy_template('passport/bin/seeds.js', `${path}/bin/seeds.js`)

    // bin/seeds.js
    let seeds = loadTemplate('passport/bin/seeds.js');
    seeds = seeds.replace('{app_name}', app_name);
    createFile(`${path}/bin/seeds.js`, seeds);

    createDir(`${path}/passport`);
    copy_template('passport/index.js', `${path}/passport/index.js`)
    copy_template('passport/localStrategy.js', `${path}/passport/localStrategy.js`)
    copy_template('passport/serializers.js', `${path}/passport/serializers.js`)

    copy_template('passport/views/pug/layout.pug', `${path}/views/layout.pug`);

    createDir(`${path}/views/auth`);
    copy_template('passport/views/pug/login.pug', `${path}/views/auth/login.pug`);
    copy_template('passport/views/pug/signup.pug', `${path}/views/auth/signup.pug`);

    // Add handlebars helper 
    // not needed anymore
    app = app.replace('{auth_hbs_helper}', `
hbs.registerHelper('ifUndefined', (value, options) => {
  if (arguments.length < 2)
      throw new Error("Handlebars Helper ifUndefined needs 1 parameter");
  if (typeof value !== undefined ) {
      return options.inverse(this);
  } else {
      return options.fn(this);
  }
});
  `);
  } else {
    app = app.replace('{auth_requires}', ``);
    app = app.replace('{auth}', ``);
    app = app.replace('{auth_routes}', ``);
    app = app.replace('{auth_hbs_helper}', ``);

    copy_template('pug/layout.pug', `${path}/views/layout.pug`);
  }
  // CSS Engine support
  switch (program.css || 'scss') {
    case 'plain':
      copy_template('css/style.css', `${path}/public/stylesheets/style.css`);
      expressCss = '';
      break;
    case 'less':
      copy_template('css/style.less', `${path}/public/stylesheets/style.less`);
      expressCss = "app.use(require('less-middleware')(path.join(__dirname, 'public')));";
      pkg.dependencies['less-middleware'] = '~2.2.1';
      break;
    case 'sass':
      copy_template('css/style.sass', `${path}/public/stylesheets/style.sass`);
      pkg.dependencies['node-sass-middleware'] = '^0.11.0';
      expressCss = `
app.use(require('node-sass-middleware')({
  src:  path.join(__dirname, 'public'),
  dest: path.join(__dirname, 'public'),
  indentedSyntax: true,
  sourceMap: true
}));
      `;
      break;
    case 'scss':
      copy_template('css/style.scss', `${path}/public/stylesheets/style.scss`);
      pkg.dependencies['node-sass-middleware'] = '^0.11.0';
      expressCss = `
app.use(require('node-sass-middleware')({
  src:  path.join(__dirname, 'public'),
  dest: path.join(__dirname, 'public'),
  sourceMap: true
}));
      `;
  }

  app = app.replace('{expressCss}', expressCss);
  app = app.replace('{app_name}', app_name);

  // sort dependencies like npm(1)
  pkg.dependencies = sortedObject(pkg.dependencies);

  copy_template('.env', `${path}/.env`);
  copy_template('js/gitignore', `${path}/.gitignore`);
  copy_template('js/www', `${path}/bin/www`);
  copy_template('js/routes/index.js', `${path}/routes/index.js`)
  copy_template('pug/index.pug', `${path}/views/index.pug`);
  copy_template('pug/error.pug', `${path}/views/error.pug`);
  copy_template('pug/not-found.pug', `${path}/views/not-found.pug`);
  copy_template('images/favicon.ico', `${path}/public/images/favicon.ico`);
  copy_template('javascripts/script.js', `${path}/public/javascripts/script.js`);

  createFile(`${path}/package.json`, JSON.stringify(pkg, null, 2) + '\n');
  createFile(`${path}/app.js`, app);

  process.chdir(path);

  if (program.git) {
    console.log('\n > Creating a git repository and commiting all your files\n');
    exec('git init && git add . && git commit -m "initial commit"', { stdio: 'inherit' });
  }

  console.log('\n > Installing NPM packages. Please wait ‚ö°Ô∏è\n');

  exec('npm install', { stdio: 'inherit' });

  // console.log();
  // console.log('   Install dependencies:');
  // console.log('   $ cd %s && npm install', path);
  console.log();
  console.log('   Start your app in development mode:');
  console.log('   $ SET DEBUG=%s:* & npm run dev', app_name);
  console.log();
  console.log('   Start your app:');
  console.log('   $ npm start');
  console.log();
  console.log('   BlisS Coding üíª ‚ù§Ô∏è\n\n');
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  createFile(to, fs.readFileSync(from, 'utf-8'));
}

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

// Create an app name from a directory path, fitting npm naming requirements.
function createAppName(pathName) {
  return path.basename(pathName)
    .replace(/[^A-Za-z0-9\.()!~*'-]+/g, '-')
    .replace(/^[-_\.]+|-+$/g, '')
    .toLowerCase()
}

// Graceful exit for async STDIO
function exit(code) {
  function done() { if (!(draining--)) _exit(code); }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function (stream) {
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

function main() {
  var destinationPath = program.args.shift() || '.';
  var appName = createAppName(path.resolve(destinationPath)) || 'hello-world'

  // Generate application
  if (fs.existsSync(destinationPath)) {
    if (program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', ok => {
        if (ok) { createApplication(appName, destinationPath); }
        else { console.error('aborting'); exit(1); }
      });
    }
  } else {
    createApplication(appName, destinationPath);
  }
}

// Display a warning similar to how errors are displayed by commander.
function warning(message) {
  console.error()
  message.split('\n').forEach(function (line) {
    console.error('  warning: %s', line)
  })
  console.error()
}

function createFile(path, str) {
  try {
    fs.writeFileSync(path, str, { mode: 0o666 });
    console.log('   \x1b[36mcreate\x1b[0m file : ' + path);
  } catch (err) {
    console.error(err);
  }
}

function createDir(path) {
  try {
    fs.mkdirsSync(path);
    console.log('   \033[36mcreate\033[0m dir  : ' + path);
  } catch (err) {
    console.error(err);
  }
}
